# -*- coding: utf-8 -*-
"""depthttry

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DB3q1jpO6VLh0Z-Uzk0sVckhKVO83kEs
"""


from PIL import Image
import cv2
from keras.models import load_model
from layers import BilinearUpSampling2D
from utils import predict, load_images, display_images
from matplotlib import pyplot as plt
import time
custom_objects = {'BilinearUpSampling2D': BilinearUpSampling2D, 'depth_loss_function': None}

print('Loading model...')
model_path = "nyu.h5"
# Load model into GPU / CPU
model = load_model(model_path, custom_objects=custom_objects, compile=False)

print('\nModel loaded ({0}).'.format(model_path))

import numpy as np

example_path = "photo.jpg"
inputs = np.clip(np.asarray(Image.open(example_path), dtype=float) / 255, 0, 1)
# Compute results

outputs = predict(model, inputs)

import cv2
img = cv2.imread(example_path, cv2.IMREAD_UNCHANGED)
input1 = np.clip(np.asarray(img, dtype=float) / 255, 0, 1)
# Compute results
input2 = np.clip(np.asarray(np.flip(img,axis=1), dtype=float) / 255, 0, 1)
output1 = predict(model, input1)
output2 = predict(model, input2)

#cv2_imshow(outputs[0,:,:,0])
rescaled1 =output1[0,:,:,0]
print(rescaled1)
rescaled1 = rescaled1 - np.min(rescaled1)
print(rescaled1)
rescaled1 = rescaled1 / np.max(rescaled1)
print(rescaled1*255)
rescaled1 =  cv2.resize(rescaled1, (img.shape[1],img.shape[0]))*255

rescaled2  =output2[0,:,:,0]
print(rescaled2)
rescaled2 = rescaled2 - np.min(rescaled2)
print(rescaled2)
rescaled2 = rescaled2 / np.max(rescaled2)
print(rescaled2*255)
rescaled2 =  cv2.resize(rescaled2, (img.shape[1],img.shape[0]))*255

plt.imshow("res",(rescaled1+rescaled2)//2)
plt.imshow("img",img)
mask = cv2.inRange(rescaled1*255,0, 100)
plt.imshow("mask",mask)
time.sleep(60)
